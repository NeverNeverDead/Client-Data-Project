This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-15T20:34:52.199Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/workflows/ci-cd.yml
.github/workflows/ci.sh
backend/app.py
backend/consumer.py
backend/Dockerfile
backend/requirements.txt
docker-compose.yml
frontend/Dockerfile
frontend/public/index.html
frontend/public/styles.css

================================================================
Repository Files
================================================================

================
File: .github/workflows/ci-cd.yml
================
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
      name: Build and Push Docker Images
      runs-on: ubuntu-24.04

      steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Flask API Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/client_data_project-flask_api:latest -f backend/Dockerfile .

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/client_data_project-frontend:latest -f frontend/Dockerfile .

================
File: .github/workflows/ci.sh
================
#!/bin/bash

# Build Flask API image
docker build -t client_data_project-flask_api:latest backend/

# Tag the Flask API image
docker tag client_data_project-flask_api:latest curvereality/client_data_project-flask_api:latest

# Push the Flask API image to Docker Hub
docker push curvereality/client_data_project-flask_api:latest

# Build Frontend image
docker build -t client_data_project-frontend:latest frontend/

# Tag the Frontend image
docker tag client_data_project-frontend:latest curvereality/client_data_project-frontend:latest

# Push the Frontend image to Docker Hub
docker push curvereality/client_data_project-frontend:latest

================
File: backend/app.py
================
import pika
from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://admin:strongpassword@database/insurance_data'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class Client(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    policy = db.Column(db.String(50), nullable=False)

def send_message(queue_name, message):
    connection = pika.BlockingConnection(pika.ConnectionParameters('message_queue'))
    channel = connection.channel()
    channel.queue_declare(queue=queue_name)
    channel.basic_publish(exchange='', routing_key=queue_name, body=message)
    print(f" [x] Sent '{message}'")
    connection.close()

@app.before_first_request
def create_tables():
    db.create_all()

@app.route('/clients', methods=['GET'])
def get_clients():
    clients = Client.query.all()
    return jsonify([{"id": client.id, "name": client.name, "policy": client.policy} for client in clients])

@app.route('/clients', methods=['POST'])
def create_client():
    data = request.get_json()
    if not data or 'name' not in data or 'policy' not in data:
        return jsonify({"message": "Недостаточно данных!"}), 400
    new_client = Client(name=data['name'], policy=data['policy'])
    db.session.add(new_client)
    db.session.commit()
    send_message('client_creation_queue', f"Клиент создан: {new_client.name}")
    return jsonify({"message": "Клиент создан!", "id": new_client.id}), 201

@app.route('/clients/search', methods=['GET'])
def search_clients():
    query = request.args.get('query')
    if not query:
        return jsonify({"message": "Введите запрос для поиска!"}), 400
    clients = Client.query.filter(Client.name.ilike(f"%{query}%")).all()
    return jsonify([{"id": client.id, "name": client.name, "policy": client.policy} for client in clients])

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

================
File: backend/consumer.py
================
import pika

def callback(ch, method, properties, body):
    print(f" [x] Received {body.decode()}")
    # Здесь добавьте код для обработки сообщения, например, обновление статуса клиента в БД.

def consume_messages(queue_name):
    connection = pika.BlockingConnection(pika.ConnectionParameters('message_queue'))
    channel = connection.channel()
    channel.queue_declare(queue=queue_name)
    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)
    print(' [*] Waiting for messages. To exit press CTRL+C')
    channel.start_consuming()

consume_messages('client_creation_queue')  # Замените на имя вашей очереди

================
File: backend/Dockerfile
================
FROM python:3.9-slim

WORKDIR /app

COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY backend/ .

CMD ["python", "app.py"]

================
File: backend/requirements.txt
================
Flask==2.2.3
Werkzeug==2.2.3
Flask-SQLAlchemy
Flask-CORS
psycopg2-binary
pika

================
File: docker-compose.yml
================
version: "3.8"

services:
  database:
    image: postgres:15
    deploy:
      replicas: 1
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: strongpassword
      POSTGRES_DB: insurance_data
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@insurance.com
      PGADMIN_DEFAULT_PASSWORD: strongpassword
    ports:
      - "8081:80"

  flask_api:
    image: curvereality/client_data_project-flask_api:latest
    deploy:
      replicas: 3
    ports:
      - "5000:5000"
    depends_on:
      - database
      - message_queue

  frontend:
    image: curvereality/client_data_project-frontend:latest
    deploy:
      replicas: 2
    ports:
      - "3001:80"

  message_queue:
    image: rabbitmq:3-management
    deploy:
      replicas: 1
    ports:
      - "5672:5672"
      - "15672:15672"

volumes:
  postgres_data:

networks:
  default:
    driver: overlay
    attachable: true

================
File: frontend/Dockerfile
================
FROM nginx:alpine

# Копирование статических файлов из папки public
COPY frontend/public /usr/share/nginx/html
    
EXPOSE 80

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Управление клиентами</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <h1>Система управления данными клиентов для страховых компаний</h1>

    <div>
        <h2>Добавить нового клиента:</h2>
        <form id="add-client-form">
            <input type="text" id="client-name" placeholder="Имя клиента" required>
            <input type="text" id="client-policy" placeholder="Номер полиса" required>
            <button type="submit">Добавить клиента</button>
        </form>
    </div>

    <div>
        <h2>Клиенты:</h2>
        <ul id="clients-list"></ul>
    </div>

    <div>
        <h2>Поиск клиента:</h2>
        <input type="text" id="search-client" placeholder="Введите имя или номер полиса">
        <ul id="search-results"></ul>
    </div>

    <script>
        // Код для добавления клиента
        document.getElementById('add-client-form').addEventListener('submit', function(event) {
            event.preventDefault();
            const name = document.getElementById('client-name').value;
            const policy = document.getElementById('client-policy').value;

            fetch('http://localhost:5000/clients', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name, policy })
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                fetchClients();
            })
            .catch(error => console.error('Ошибка:', error));
        });

        // Код для отображения списка клиентов
        function fetchClients() {
            fetch('http://localhost:5000/clients')
                .then(response => response.json())
                .then(data => {
                    const clientsList = document.getElementById('clients-list');
                    clientsList.innerHTML = '';
                    data.forEach(client => {
                        const li = document.createElement('li');
                        li.textContent = `${client.id}: ${client.name} (Полис: ${client.policy})`;
                        clientsList.appendChild(li);
                    });
                })
                .catch(error => console.error('Ошибка:', error));
        }

        // Код для поиска клиента
        document.getElementById('search-client').addEventListener('input', function(event) {
            const query = event.target.value;

            fetch(`http://localhost:5000/clients?search=${query}`)
                .then(response => response.json())
                .then(data => {
                    const searchResults = document.getElementById('search-results');
                    searchResults.innerHTML = '';
                    data.forEach(client => {
                        const li = document.createElement('li');
                        li.textContent = `${client.id}: ${client.name} (Полис: ${client.policy})`;
                        searchResults.appendChild(li);
                    });
                })
                .catch(error => console.error('Ошибка:', error));
        });

        // Инициализация при загрузке страницы
        fetchClients();
    </script>
</body>
</html>

================
File: frontend/public/styles.css
================
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    color: #333;
    margin: 0;
    padding: 0;
    text-align: center;
}

h1 {
    margin-bottom: 20px;
}

#clients-list {
    list-style-type: none;
    padding: 0;
}

#clients-list li {
    background-color: #ffffff;
    margin: 5px 0;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
