name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - tests
      - deploy

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Build and Push Flask API Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/client_data_project-flask_api:latest -f backend/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/client_data_project-flask_api:latest

    - name: Build and Push Frontend Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/client_data_project-frontend:latest -f frontend/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/client_data_project-frontend:latest

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        pip install -r backend/requirements.txt
        pip install pytest flake8

    - name: Lint code
      run: |
        flake8 backend

    - name: Run tests
      run: |
        pytest backend/tests

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [run-tests, build-and-push]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

    - name: Deploy Application
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          cd /path/to/your/app
          docker-compose pull
          docker-compose up -d --build
        EOF
